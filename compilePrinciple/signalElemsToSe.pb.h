// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signalElemsToSe.proto

#ifndef PROTOBUF_signalElemsToSe_2eproto__INCLUDED
#define PROTOBUF_signalElemsToSe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_signalElemsToSe_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultssignalElemsImpl();
void InitDefaultssignalElems();
inline void InitDefaults() {
  InitDefaultssignalElems();
}
}  // namespace protobuf_signalElemsToSe_2eproto
class signalElems;
class signalElemsDefaultTypeInternal;
extern signalElemsDefaultTypeInternal _signalElems_default_instance_;

// ===================================================================

class signalElems : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:signalElems) */ {
 public:
  signalElems();
  virtual ~signalElems();

  signalElems(const signalElems& from);

  inline signalElems& operator=(const signalElems& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  signalElems(signalElems&& from) noexcept
    : signalElems() {
    *this = ::std::move(from);
  }

  inline signalElems& operator=(signalElems&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const signalElems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const signalElems* internal_default_instance() {
    return reinterpret_cast<const signalElems*>(
               &_signalElems_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(signalElems* other);
  friend void swap(signalElems& a, signalElems& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline signalElems* New() const PROTOBUF_FINAL { return New(NULL); }

  signalElems* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const signalElems& from);
  void MergeFrom(const signalElems& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(signalElems* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 NoIndex = 2;
  int noindex_size() const;
  void clear_noindex();
  static const int kNoIndexFieldNumber = 2;
  ::google::protobuf::int32 noindex(int index) const;
  void set_noindex(int index, ::google::protobuf::int32 value);
  void add_noindex(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      noindex() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_noindex();

  // repeated string NoItem = 3;
  int noitem_size() const;
  void clear_noitem();
  static const int kNoItemFieldNumber = 3;
  const ::std::string& noitem(int index) const;
  ::std::string* mutable_noitem(int index);
  void set_noitem(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_noitem(int index, ::std::string&& value);
  #endif
  void set_noitem(int index, const char* value);
  void set_noitem(int index, const char* value, size_t size);
  ::std::string* add_noitem();
  void add_noitem(const ::std::string& value);
  #if LANG_CXX11
  void add_noitem(::std::string&& value);
  #endif
  void add_noitem(const char* value);
  void add_noitem(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& noitem() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_noitem();

  // repeated string NoIndex_explain = 4;
  int noindex_explain_size() const;
  void clear_noindex_explain();
  static const int kNoIndexExplainFieldNumber = 4;
  const ::std::string& noindex_explain(int index) const;
  ::std::string* mutable_noindex_explain(int index);
  void set_noindex_explain(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_noindex_explain(int index, ::std::string&& value);
  #endif
  void set_noindex_explain(int index, const char* value);
  void set_noindex_explain(int index, const char* value, size_t size);
  ::std::string* add_noindex_explain();
  void add_noindex_explain(const ::std::string& value);
  #if LANG_CXX11
  void add_noindex_explain(::std::string&& value);
  #endif
  void add_noindex_explain(const char* value);
  void add_noindex_explain(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& noindex_explain() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_noindex_explain();

  // int32 elems_Length = 1;
  void clear_elems_length();
  static const int kElemsLengthFieldNumber = 1;
  ::google::protobuf::int32 elems_length() const;
  void set_elems_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:signalElems)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > noindex_;
  mutable int _noindex_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> noitem_;
  ::google::protobuf::RepeatedPtrField< ::std::string> noindex_explain_;
  ::google::protobuf::int32 elems_length_;
  mutable int _cached_size_;
  friend struct ::protobuf_signalElemsToSe_2eproto::TableStruct;
  friend void ::protobuf_signalElemsToSe_2eproto::InitDefaultssignalElemsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// signalElems

// int32 elems_Length = 1;
inline void signalElems::clear_elems_length() {
  elems_length_ = 0;
}
inline ::google::protobuf::int32 signalElems::elems_length() const {
  // @@protoc_insertion_point(field_get:signalElems.elems_Length)
  return elems_length_;
}
inline void signalElems::set_elems_length(::google::protobuf::int32 value) {
  
  elems_length_ = value;
  // @@protoc_insertion_point(field_set:signalElems.elems_Length)
}

// repeated int32 NoIndex = 2;
inline int signalElems::noindex_size() const {
  return noindex_.size();
}
inline void signalElems::clear_noindex() {
  noindex_.Clear();
}
inline ::google::protobuf::int32 signalElems::noindex(int index) const {
  // @@protoc_insertion_point(field_get:signalElems.NoIndex)
  return noindex_.Get(index);
}
inline void signalElems::set_noindex(int index, ::google::protobuf::int32 value) {
  noindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:signalElems.NoIndex)
}
inline void signalElems::add_noindex(::google::protobuf::int32 value) {
  noindex_.Add(value);
  // @@protoc_insertion_point(field_add:signalElems.NoIndex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
signalElems::noindex() const {
  // @@protoc_insertion_point(field_list:signalElems.NoIndex)
  return noindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
signalElems::mutable_noindex() {
  // @@protoc_insertion_point(field_mutable_list:signalElems.NoIndex)
  return &noindex_;
}

// repeated string NoItem = 3;
inline int signalElems::noitem_size() const {
  return noitem_.size();
}
inline void signalElems::clear_noitem() {
  noitem_.Clear();
}
inline const ::std::string& signalElems::noitem(int index) const {
  // @@protoc_insertion_point(field_get:signalElems.NoItem)
  return noitem_.Get(index);
}
inline ::std::string* signalElems::mutable_noitem(int index) {
  // @@protoc_insertion_point(field_mutable:signalElems.NoItem)
  return noitem_.Mutable(index);
}
inline void signalElems::set_noitem(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:signalElems.NoItem)
  noitem_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void signalElems::set_noitem(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:signalElems.NoItem)
  noitem_.Mutable(index)->assign(std::move(value));
}
#endif
inline void signalElems::set_noitem(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  noitem_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:signalElems.NoItem)
}
inline void signalElems::set_noitem(int index, const char* value, size_t size) {
  noitem_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:signalElems.NoItem)
}
inline ::std::string* signalElems::add_noitem() {
  // @@protoc_insertion_point(field_add_mutable:signalElems.NoItem)
  return noitem_.Add();
}
inline void signalElems::add_noitem(const ::std::string& value) {
  noitem_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:signalElems.NoItem)
}
#if LANG_CXX11
inline void signalElems::add_noitem(::std::string&& value) {
  noitem_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:signalElems.NoItem)
}
#endif
inline void signalElems::add_noitem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  noitem_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:signalElems.NoItem)
}
inline void signalElems::add_noitem(const char* value, size_t size) {
  noitem_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:signalElems.NoItem)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
signalElems::noitem() const {
  // @@protoc_insertion_point(field_list:signalElems.NoItem)
  return noitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
signalElems::mutable_noitem() {
  // @@protoc_insertion_point(field_mutable_list:signalElems.NoItem)
  return &noitem_;
}

// repeated string NoIndex_explain = 4;
inline int signalElems::noindex_explain_size() const {
  return noindex_explain_.size();
}
inline void signalElems::clear_noindex_explain() {
  noindex_explain_.Clear();
}
inline const ::std::string& signalElems::noindex_explain(int index) const {
  // @@protoc_insertion_point(field_get:signalElems.NoIndex_explain)
  return noindex_explain_.Get(index);
}
inline ::std::string* signalElems::mutable_noindex_explain(int index) {
  // @@protoc_insertion_point(field_mutable:signalElems.NoIndex_explain)
  return noindex_explain_.Mutable(index);
}
inline void signalElems::set_noindex_explain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:signalElems.NoIndex_explain)
  noindex_explain_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void signalElems::set_noindex_explain(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:signalElems.NoIndex_explain)
  noindex_explain_.Mutable(index)->assign(std::move(value));
}
#endif
inline void signalElems::set_noindex_explain(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  noindex_explain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:signalElems.NoIndex_explain)
}
inline void signalElems::set_noindex_explain(int index, const char* value, size_t size) {
  noindex_explain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:signalElems.NoIndex_explain)
}
inline ::std::string* signalElems::add_noindex_explain() {
  // @@protoc_insertion_point(field_add_mutable:signalElems.NoIndex_explain)
  return noindex_explain_.Add();
}
inline void signalElems::add_noindex_explain(const ::std::string& value) {
  noindex_explain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:signalElems.NoIndex_explain)
}
#if LANG_CXX11
inline void signalElems::add_noindex_explain(::std::string&& value) {
  noindex_explain_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:signalElems.NoIndex_explain)
}
#endif
inline void signalElems::add_noindex_explain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  noindex_explain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:signalElems.NoIndex_explain)
}
inline void signalElems::add_noindex_explain(const char* value, size_t size) {
  noindex_explain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:signalElems.NoIndex_explain)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
signalElems::noindex_explain() const {
  // @@protoc_insertion_point(field_list:signalElems.NoIndex_explain)
  return noindex_explain_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
signalElems::mutable_noindex_explain() {
  // @@protoc_insertion_point(field_mutable_list:signalElems.NoIndex_explain)
  return &noindex_explain_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_signalElemsToSe_2eproto__INCLUDED
