// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tableElemsToSe.proto

#ifndef PROTOBUF_tableElemsToSe_2eproto__INCLUDED
#define PROTOBUF_tableElemsToSe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_tableElemsToSe_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultstableElems_elemImpl();
void InitDefaultstableElems_elem();
void InitDefaultstableElemsImpl();
void InitDefaultstableElems();
inline void InitDefaults() {
  InitDefaultstableElems_elem();
  InitDefaultstableElems();
}
}  // namespace protobuf_tableElemsToSe_2eproto
class tableElems;
class tableElemsDefaultTypeInternal;
extern tableElemsDefaultTypeInternal _tableElems_default_instance_;
class tableElems_elem;
class tableElems_elemDefaultTypeInternal;
extern tableElems_elemDefaultTypeInternal _tableElems_elem_default_instance_;

// ===================================================================

class tableElems_elem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tableElems.elem) */ {
 public:
  tableElems_elem();
  virtual ~tableElems_elem();

  tableElems_elem(const tableElems_elem& from);

  inline tableElems_elem& operator=(const tableElems_elem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tableElems_elem(tableElems_elem&& from) noexcept
    : tableElems_elem() {
    *this = ::std::move(from);
  }

  inline tableElems_elem& operator=(tableElems_elem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tableElems_elem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tableElems_elem* internal_default_instance() {
    return reinterpret_cast<const tableElems_elem*>(
               &_tableElems_elem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(tableElems_elem* other);
  friend void swap(tableElems_elem& a, tableElems_elem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tableElems_elem* New() const PROTOBUF_FINAL { return New(NULL); }

  tableElems_elem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tableElems_elem& from);
  void MergeFrom(const tableElems_elem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tableElems_elem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string row_char = 1;
  void clear_row_char();
  static const int kRowCharFieldNumber = 1;
  const ::std::string& row_char() const;
  void set_row_char(const ::std::string& value);
  #if LANG_CXX11
  void set_row_char(::std::string&& value);
  #endif
  void set_row_char(const char* value);
  void set_row_char(const char* value, size_t size);
  ::std::string* mutable_row_char();
  ::std::string* release_row_char();
  void set_allocated_row_char(::std::string* row_char);

  // string cloumn_string = 2;
  void clear_cloumn_string();
  static const int kCloumnStringFieldNumber = 2;
  const ::std::string& cloumn_string() const;
  void set_cloumn_string(const ::std::string& value);
  #if LANG_CXX11
  void set_cloumn_string(::std::string&& value);
  #endif
  void set_cloumn_string(const char* value);
  void set_cloumn_string(const char* value, size_t size);
  ::std::string* mutable_cloumn_string();
  ::std::string* release_cloumn_string();
  void set_allocated_cloumn_string(::std::string* cloumn_string);

  // @@protoc_insertion_point(class_scope:tableElems.elem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_char_;
  ::google::protobuf::internal::ArenaStringPtr cloumn_string_;
  mutable int _cached_size_;
  friend struct ::protobuf_tableElemsToSe_2eproto::TableStruct;
  friend void ::protobuf_tableElemsToSe_2eproto::InitDefaultstableElems_elemImpl();
};
// -------------------------------------------------------------------

class tableElems : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tableElems) */ {
 public:
  tableElems();
  virtual ~tableElems();

  tableElems(const tableElems& from);

  inline tableElems& operator=(const tableElems& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tableElems(tableElems&& from) noexcept
    : tableElems() {
    *this = ::std::move(from);
  }

  inline tableElems& operator=(tableElems&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tableElems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tableElems* internal_default_instance() {
    return reinterpret_cast<const tableElems*>(
               &_tableElems_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(tableElems* other);
  friend void swap(tableElems& a, tableElems& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tableElems* New() const PROTOBUF_FINAL { return New(NULL); }

  tableElems* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tableElems& from);
  void MergeFrom(const tableElems& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tableElems* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef tableElems_elem elem;

  // accessors -------------------------------------------------------

  // repeated .tableElems.elem elems = 2;
  int elems_size() const;
  void clear_elems();
  static const int kElemsFieldNumber = 2;
  const ::tableElems_elem& elems(int index) const;
  ::tableElems_elem* mutable_elems(int index);
  ::tableElems_elem* add_elems();
  ::google::protobuf::RepeatedPtrField< ::tableElems_elem >*
      mutable_elems();
  const ::google::protobuf::RepeatedPtrField< ::tableElems_elem >&
      elems() const;

  // repeated string columns = 4;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 4;
  const ::std::string& columns(int index) const;
  ::std::string* mutable_columns(int index);
  void set_columns(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_columns(int index, ::std::string&& value);
  #endif
  void set_columns(int index, const char* value);
  void set_columns(int index, const char* value, size_t size);
  ::std::string* add_columns();
  void add_columns(const ::std::string& value);
  #if LANG_CXX11
  void add_columns(::std::string&& value);
  #endif
  void add_columns(const char* value);
  void add_columns(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& columns() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_columns();

  // repeated string rows = 6;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 6;
  const ::std::string& rows(int index) const;
  ::std::string* mutable_rows(int index);
  void set_rows(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rows(int index, ::std::string&& value);
  #endif
  void set_rows(int index, const char* value);
  void set_rows(int index, const char* value, size_t size);
  ::std::string* add_rows();
  void add_rows(const ::std::string& value);
  #if LANG_CXX11
  void add_rows(::std::string&& value);
  #endif
  void add_rows(const char* value);
  void add_rows(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rows() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rows();

  // repeated int32 table_LL1 = 8;
  int table_ll1_size() const;
  void clear_table_ll1();
  static const int kTableLL1FieldNumber = 8;
  ::google::protobuf::int32 table_ll1(int index) const;
  void set_table_ll1(int index, ::google::protobuf::int32 value);
  void add_table_ll1(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      table_ll1() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_table_ll1();

  // string NullCharSignal = 11;
  void clear_nullcharsignal();
  static const int kNullCharSignalFieldNumber = 11;
  const ::std::string& nullcharsignal() const;
  void set_nullcharsignal(const ::std::string& value);
  #if LANG_CXX11
  void set_nullcharsignal(::std::string&& value);
  #endif
  void set_nullcharsignal(const char* value);
  void set_nullcharsignal(const char* value, size_t size);
  ::std::string* mutable_nullcharsignal();
  ::std::string* release_nullcharsignal();
  void set_allocated_nullcharsignal(::std::string* nullcharsignal);

  // int32 elems_Length = 1;
  void clear_elems_length();
  static const int kElemsLengthFieldNumber = 1;
  ::google::protobuf::int32 elems_length() const;
  void set_elems_length(::google::protobuf::int32 value);

  // int32 columns_Length = 3;
  void clear_columns_length();
  static const int kColumnsLengthFieldNumber = 3;
  ::google::protobuf::int32 columns_length() const;
  void set_columns_length(::google::protobuf::int32 value);

  // int32 rows_Length = 5;
  void clear_rows_length();
  static const int kRowsLengthFieldNumber = 5;
  ::google::protobuf::int32 rows_length() const;
  void set_rows_length(::google::protobuf::int32 value);

  // int32 table_LL1_Length = 7;
  void clear_table_ll1_length();
  static const int kTableLL1LengthFieldNumber = 7;
  ::google::protobuf::int32 table_ll1_length() const;
  void set_table_ll1_length(::google::protobuf::int32 value);

  // int32 null_inLL1 = 9;
  void clear_null_inll1();
  static const int kNullInLL1FieldNumber = 9;
  ::google::protobuf::int32 null_inll1() const;
  void set_null_inll1(::google::protobuf::int32 value);

  // int32 error_inLL1 = 10;
  void clear_error_inll1();
  static const int kErrorInLL1FieldNumber = 10;
  ::google::protobuf::int32 error_inll1() const;
  void set_error_inll1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tableElems)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tableElems_elem > elems_;
  ::google::protobuf::RepeatedPtrField< ::std::string> columns_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rows_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > table_ll1_;
  mutable int _table_ll1_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr nullcharsignal_;
  ::google::protobuf::int32 elems_length_;
  ::google::protobuf::int32 columns_length_;
  ::google::protobuf::int32 rows_length_;
  ::google::protobuf::int32 table_ll1_length_;
  ::google::protobuf::int32 null_inll1_;
  ::google::protobuf::int32 error_inll1_;
  mutable int _cached_size_;
  friend struct ::protobuf_tableElemsToSe_2eproto::TableStruct;
  friend void ::protobuf_tableElemsToSe_2eproto::InitDefaultstableElemsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tableElems_elem

// string row_char = 1;
inline void tableElems_elem::clear_row_char() {
  row_char_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tableElems_elem::row_char() const {
  // @@protoc_insertion_point(field_get:tableElems.elem.row_char)
  return row_char_.GetNoArena();
}
inline void tableElems_elem::set_row_char(const ::std::string& value) {
  
  row_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tableElems.elem.row_char)
}
#if LANG_CXX11
inline void tableElems_elem::set_row_char(::std::string&& value) {
  
  row_char_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tableElems.elem.row_char)
}
#endif
inline void tableElems_elem::set_row_char(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tableElems.elem.row_char)
}
inline void tableElems_elem::set_row_char(const char* value, size_t size) {
  
  row_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tableElems.elem.row_char)
}
inline ::std::string* tableElems_elem::mutable_row_char() {
  
  // @@protoc_insertion_point(field_mutable:tableElems.elem.row_char)
  return row_char_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tableElems_elem::release_row_char() {
  // @@protoc_insertion_point(field_release:tableElems.elem.row_char)
  
  return row_char_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tableElems_elem::set_allocated_row_char(::std::string* row_char) {
  if (row_char != NULL) {
    
  } else {
    
  }
  row_char_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_char);
  // @@protoc_insertion_point(field_set_allocated:tableElems.elem.row_char)
}

// string cloumn_string = 2;
inline void tableElems_elem::clear_cloumn_string() {
  cloumn_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tableElems_elem::cloumn_string() const {
  // @@protoc_insertion_point(field_get:tableElems.elem.cloumn_string)
  return cloumn_string_.GetNoArena();
}
inline void tableElems_elem::set_cloumn_string(const ::std::string& value) {
  
  cloumn_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tableElems.elem.cloumn_string)
}
#if LANG_CXX11
inline void tableElems_elem::set_cloumn_string(::std::string&& value) {
  
  cloumn_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tableElems.elem.cloumn_string)
}
#endif
inline void tableElems_elem::set_cloumn_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cloumn_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tableElems.elem.cloumn_string)
}
inline void tableElems_elem::set_cloumn_string(const char* value, size_t size) {
  
  cloumn_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tableElems.elem.cloumn_string)
}
inline ::std::string* tableElems_elem::mutable_cloumn_string() {
  
  // @@protoc_insertion_point(field_mutable:tableElems.elem.cloumn_string)
  return cloumn_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tableElems_elem::release_cloumn_string() {
  // @@protoc_insertion_point(field_release:tableElems.elem.cloumn_string)
  
  return cloumn_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tableElems_elem::set_allocated_cloumn_string(::std::string* cloumn_string) {
  if (cloumn_string != NULL) {
    
  } else {
    
  }
  cloumn_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cloumn_string);
  // @@protoc_insertion_point(field_set_allocated:tableElems.elem.cloumn_string)
}

// -------------------------------------------------------------------

// tableElems

// int32 elems_Length = 1;
inline void tableElems::clear_elems_length() {
  elems_length_ = 0;
}
inline ::google::protobuf::int32 tableElems::elems_length() const {
  // @@protoc_insertion_point(field_get:tableElems.elems_Length)
  return elems_length_;
}
inline void tableElems::set_elems_length(::google::protobuf::int32 value) {
  
  elems_length_ = value;
  // @@protoc_insertion_point(field_set:tableElems.elems_Length)
}

// repeated .tableElems.elem elems = 2;
inline int tableElems::elems_size() const {
  return elems_.size();
}
inline void tableElems::clear_elems() {
  elems_.Clear();
}
inline const ::tableElems_elem& tableElems::elems(int index) const {
  // @@protoc_insertion_point(field_get:tableElems.elems)
  return elems_.Get(index);
}
inline ::tableElems_elem* tableElems::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:tableElems.elems)
  return elems_.Mutable(index);
}
inline ::tableElems_elem* tableElems::add_elems() {
  // @@protoc_insertion_point(field_add:tableElems.elems)
  return elems_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tableElems_elem >*
tableElems::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:tableElems.elems)
  return &elems_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tableElems_elem >&
tableElems::elems() const {
  // @@protoc_insertion_point(field_list:tableElems.elems)
  return elems_;
}

// int32 columns_Length = 3;
inline void tableElems::clear_columns_length() {
  columns_length_ = 0;
}
inline ::google::protobuf::int32 tableElems::columns_length() const {
  // @@protoc_insertion_point(field_get:tableElems.columns_Length)
  return columns_length_;
}
inline void tableElems::set_columns_length(::google::protobuf::int32 value) {
  
  columns_length_ = value;
  // @@protoc_insertion_point(field_set:tableElems.columns_Length)
}

// repeated string columns = 4;
inline int tableElems::columns_size() const {
  return columns_.size();
}
inline void tableElems::clear_columns() {
  columns_.Clear();
}
inline const ::std::string& tableElems::columns(int index) const {
  // @@protoc_insertion_point(field_get:tableElems.columns)
  return columns_.Get(index);
}
inline ::std::string* tableElems::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:tableElems.columns)
  return columns_.Mutable(index);
}
inline void tableElems::set_columns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tableElems.columns)
  columns_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void tableElems::set_columns(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tableElems.columns)
  columns_.Mutable(index)->assign(std::move(value));
}
#endif
inline void tableElems::set_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tableElems.columns)
}
inline void tableElems::set_columns(int index, const char* value, size_t size) {
  columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tableElems.columns)
}
inline ::std::string* tableElems::add_columns() {
  // @@protoc_insertion_point(field_add_mutable:tableElems.columns)
  return columns_.Add();
}
inline void tableElems::add_columns(const ::std::string& value) {
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tableElems.columns)
}
#if LANG_CXX11
inline void tableElems::add_columns(::std::string&& value) {
  columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tableElems.columns)
}
#endif
inline void tableElems::add_columns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tableElems.columns)
}
inline void tableElems::add_columns(const char* value, size_t size) {
  columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tableElems.columns)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tableElems::columns() const {
  // @@protoc_insertion_point(field_list:tableElems.columns)
  return columns_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tableElems::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:tableElems.columns)
  return &columns_;
}

// int32 rows_Length = 5;
inline void tableElems::clear_rows_length() {
  rows_length_ = 0;
}
inline ::google::protobuf::int32 tableElems::rows_length() const {
  // @@protoc_insertion_point(field_get:tableElems.rows_Length)
  return rows_length_;
}
inline void tableElems::set_rows_length(::google::protobuf::int32 value) {
  
  rows_length_ = value;
  // @@protoc_insertion_point(field_set:tableElems.rows_Length)
}

// repeated string rows = 6;
inline int tableElems::rows_size() const {
  return rows_.size();
}
inline void tableElems::clear_rows() {
  rows_.Clear();
}
inline const ::std::string& tableElems::rows(int index) const {
  // @@protoc_insertion_point(field_get:tableElems.rows)
  return rows_.Get(index);
}
inline ::std::string* tableElems::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:tableElems.rows)
  return rows_.Mutable(index);
}
inline void tableElems::set_rows(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tableElems.rows)
  rows_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void tableElems::set_rows(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tableElems.rows)
  rows_.Mutable(index)->assign(std::move(value));
}
#endif
inline void tableElems::set_rows(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rows_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tableElems.rows)
}
inline void tableElems::set_rows(int index, const char* value, size_t size) {
  rows_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tableElems.rows)
}
inline ::std::string* tableElems::add_rows() {
  // @@protoc_insertion_point(field_add_mutable:tableElems.rows)
  return rows_.Add();
}
inline void tableElems::add_rows(const ::std::string& value) {
  rows_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tableElems.rows)
}
#if LANG_CXX11
inline void tableElems::add_rows(::std::string&& value) {
  rows_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tableElems.rows)
}
#endif
inline void tableElems::add_rows(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rows_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tableElems.rows)
}
inline void tableElems::add_rows(const char* value, size_t size) {
  rows_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tableElems.rows)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tableElems::rows() const {
  // @@protoc_insertion_point(field_list:tableElems.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tableElems::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:tableElems.rows)
  return &rows_;
}

// int32 table_LL1_Length = 7;
inline void tableElems::clear_table_ll1_length() {
  table_ll1_length_ = 0;
}
inline ::google::protobuf::int32 tableElems::table_ll1_length() const {
  // @@protoc_insertion_point(field_get:tableElems.table_LL1_Length)
  return table_ll1_length_;
}
inline void tableElems::set_table_ll1_length(::google::protobuf::int32 value) {
  
  table_ll1_length_ = value;
  // @@protoc_insertion_point(field_set:tableElems.table_LL1_Length)
}

// repeated int32 table_LL1 = 8;
inline int tableElems::table_ll1_size() const {
  return table_ll1_.size();
}
inline void tableElems::clear_table_ll1() {
  table_ll1_.Clear();
}
inline ::google::protobuf::int32 tableElems::table_ll1(int index) const {
  // @@protoc_insertion_point(field_get:tableElems.table_LL1)
  return table_ll1_.Get(index);
}
inline void tableElems::set_table_ll1(int index, ::google::protobuf::int32 value) {
  table_ll1_.Set(index, value);
  // @@protoc_insertion_point(field_set:tableElems.table_LL1)
}
inline void tableElems::add_table_ll1(::google::protobuf::int32 value) {
  table_ll1_.Add(value);
  // @@protoc_insertion_point(field_add:tableElems.table_LL1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableElems::table_ll1() const {
  // @@protoc_insertion_point(field_list:tableElems.table_LL1)
  return table_ll1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableElems::mutable_table_ll1() {
  // @@protoc_insertion_point(field_mutable_list:tableElems.table_LL1)
  return &table_ll1_;
}

// int32 null_inLL1 = 9;
inline void tableElems::clear_null_inll1() {
  null_inll1_ = 0;
}
inline ::google::protobuf::int32 tableElems::null_inll1() const {
  // @@protoc_insertion_point(field_get:tableElems.null_inLL1)
  return null_inll1_;
}
inline void tableElems::set_null_inll1(::google::protobuf::int32 value) {
  
  null_inll1_ = value;
  // @@protoc_insertion_point(field_set:tableElems.null_inLL1)
}

// int32 error_inLL1 = 10;
inline void tableElems::clear_error_inll1() {
  error_inll1_ = 0;
}
inline ::google::protobuf::int32 tableElems::error_inll1() const {
  // @@protoc_insertion_point(field_get:tableElems.error_inLL1)
  return error_inll1_;
}
inline void tableElems::set_error_inll1(::google::protobuf::int32 value) {
  
  error_inll1_ = value;
  // @@protoc_insertion_point(field_set:tableElems.error_inLL1)
}

// string NullCharSignal = 11;
inline void tableElems::clear_nullcharsignal() {
  nullcharsignal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tableElems::nullcharsignal() const {
  // @@protoc_insertion_point(field_get:tableElems.NullCharSignal)
  return nullcharsignal_.GetNoArena();
}
inline void tableElems::set_nullcharsignal(const ::std::string& value) {
  
  nullcharsignal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tableElems.NullCharSignal)
}
#if LANG_CXX11
inline void tableElems::set_nullcharsignal(::std::string&& value) {
  
  nullcharsignal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tableElems.NullCharSignal)
}
#endif
inline void tableElems::set_nullcharsignal(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nullcharsignal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tableElems.NullCharSignal)
}
inline void tableElems::set_nullcharsignal(const char* value, size_t size) {
  
  nullcharsignal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tableElems.NullCharSignal)
}
inline ::std::string* tableElems::mutable_nullcharsignal() {
  
  // @@protoc_insertion_point(field_mutable:tableElems.NullCharSignal)
  return nullcharsignal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tableElems::release_nullcharsignal() {
  // @@protoc_insertion_point(field_release:tableElems.NullCharSignal)
  
  return nullcharsignal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tableElems::set_allocated_nullcharsignal(::std::string* nullcharsignal) {
  if (nullcharsignal != NULL) {
    
  } else {
    
  }
  nullcharsignal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nullcharsignal);
  // @@protoc_insertion_point(field_set_allocated:tableElems.NullCharSignal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tableElemsToSe_2eproto__INCLUDED
